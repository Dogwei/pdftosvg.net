// Copyright (c) PdfToSvg.NET contributors.
// https://github.com/dmester/pdftosvg.net
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CcittFaxEncoder
{
    internal static class FaxCodes
    {
        public const int MaxTerminatingRunLength = 63;

        // TABLE 1/T.6
        // Encoding: leading 1 to indicate start of code
        public const int Pass = 0b10001;
        public const int Horizontal = 0b1001;
        public const int Vertical0 = 0b11;
        public const int VerticalRight1 = 0b1011;
        public const int VerticalRight2 = 0b1000011;
        public const int VerticalRight3 = 0b10000011;
        public const int VerticalLeft1 = 0b1010;
        public const int VerticalLeft2 = 0b1000010;
        public const int VerticalLeft3 = 0b10000010;

        public const int EndOfLine = 0b1000000000001;

        public static readonly int[] EndOfFacsimileBlock = new[]
        {
            EndOfLine,
            EndOfLine
        };

        public static readonly int[] ReturnToControl = new[]
        {
            EndOfLine,
            0b11,

            EndOfLine,
            0b11,

            EndOfLine,
            0b11,

            EndOfLine,
            0b11,

            EndOfLine,
            0b11,

            EndOfLine,
            0b11,
        };

        public static IEnumerable<int> EncodeRunLength(int value, bool isWhite)
        {
            var codes = isWhite ? whiteCodes : blackCodes;
            var maxCodeValue = codes[codes.Length - 2];

            while (value >= maxCodeValue)
            {
                value -= maxCodeValue;

                yield return codes[codes.Length - 1];
            }

            for (var i = codes.Length - 4; i >= 0; i -= 2)
            {
                if (value >= codes[i])
                {
                    yield return codes[i + 1];
                    value -= codes[i];

                    if (codes[i] <= MaxTerminatingRunLength)
                    {
                        break;
                    }
                }
            }
        }

        private static int[] whiteCodes = new[]
        {
            // TABLE 2/T.6
            0,     0b100110101,
            1,     0b1000111,
            2,     0b10111,
            3,     0b11000,
            4,     0b11011,
            5,     0b11100,
            6,     0b11110,
            7,     0b11111,
            8,     0b110011,
            9,     0b110100,
            10,    0b100111,
            11,    0b101000,
            12,    0b1001000,
            13,    0b1000011,
            14,    0b1110100,
            15,    0b1110101,
            16,    0b1101010,
            17,    0b1101011,
            18,    0b10100111,
            19,    0b10001100,
            20,    0b10001000,
            21,    0b10010111,
            22,    0b10000011,
            23,    0b10000100,
            24,    0b10101000,
            25,    0b10101011,
            26,    0b10010011,
            27,    0b10100100,
            28,    0b10011000,
            29,    0b100000010,
            30,    0b100000011,
            31,    0b100011010,
            32,    0b100011011,
            33,    0b100010010,
            34,    0b100010011,
            35,    0b100010100,
            36,    0b100010101,
            37,    0b100010110,
            38,    0b100010111,
            39,    0b100101000,
            40,    0b100101001,
            41,    0b100101010,
            42,    0b100101011,
            43,    0b100101100,
            44,    0b100101101,
            45,    0b100000100,
            46,    0b100000101,
            47,    0b100001010,
            48,    0b100001011,
            49,    0b101010010,
            50,    0b101010011,
            51,    0b101010100,
            52,    0b101010101,
            53,    0b100100100,
            54,    0b100100101,
            55,    0b101011000,
            56,    0b101011001,
            57,    0b101011010,
            58,    0b101011011,
            59,    0b101001010,
            60,    0b101001011,
            61,    0b100110010,
            62,    0b100110011,
            63,    0b100110100,

            // TABLE 3/T.6
            64,    0b111011,
            128,   0b110010,
            192,   0b1010111,
            256,   0b10110111,
            320,   0b100110110,
            384,   0b100110111,
            448,   0b101100100,
            512,   0b101100101,
            576,   0b101101000,
            640,   0b101100111,
            704,   0b1011001100,
            768,   0b1011001101,
            832,   0b1011010010,
            896,   0b1011010011,
            960,   0b1011010100,
            1024,  0b1011010101,
            1088,  0b1011010110,
            1152,  0b1011010111,
            1216,  0b1011011000,
            1280,  0b1011011001,
            1344,  0b1011011010,
            1408,  0b1011011011,
            1472,  0b1010011000,
            1536,  0b1010011001,
            1600,  0b1010011010,
            1664,  0b1011000,
            1728,  0b1010011011,

            1792,  0b100000001000,
            1856,  0b100000001100,
            1920,  0b100000001101,
            1984,  0b1000000010010,
            2048,  0b1000000010011,
            2112,  0b1000000010100,
            2176,  0b1000000010101,
            2240,  0b1000000010110,
            2304,  0b1000000010111,
            2368,  0b1000000011100,
            2432,  0b1000000011101,
            2496,  0b1000000011110,
            2560,  0b1000000011111,
        };

        private static int[] blackCodes = new[]
        {
            // TABLE 2/T.6
            0,     0b10000110111,
            1,     0b1010,
            2,     0b111,
            3,     0b110,
            4,     0b1011,
            5,     0b10011,
            6,     0b10010,
            7,     0b100011,
            8,     0b1000101,
            9,     0b1000100,
            10,    0b10000100,
            11,    0b10000101,
            12,    0b10000111,
            13,    0b100000100,
            14,    0b100000111,
            15,    0b1000011000,
            16,    0b10000010111,
            17,    0b10000011000,
            18,    0b10000001000,
            19,    0b100001100111,
            20,    0b100001101000,
            21,    0b100001101100,
            22,    0b100000110111,
            23,    0b100000101000,
            24,    0b100000010111,
            25,    0b100000011000,
            26,    0b1000011001010,
            27,    0b1000011001011,
            28,    0b1000011001100,
            29,    0b1000011001101,
            30,    0b1000001101000,
            31,    0b1000001101001,
            32,    0b1000001101010,
            33,    0b1000001101011,
            34,    0b1000011010010,
            35,    0b1000011010011,
            36,    0b1000011010100,
            37,    0b1000011010101,
            38,    0b1000011010110,
            39,    0b1000011010111,
            40,    0b1000001101100,
            41,    0b1000001101101,
            42,    0b1000011011010,
            43,    0b1000011011011,
            44,    0b1000001010100,
            45,    0b1000001010101,
            46,    0b1000001010110,
            47,    0b1000001010111,
            48,    0b1000001100100,
            49,    0b1000001100101,
            50,    0b1000001010010,
            51,    0b1000001010011,
            52,    0b1000000100100,
            53,    0b1000000110111,
            54,    0b1000000111000,
            55,    0b1000000100111,
            56,    0b1000000101000,
            57,    0b1000001011000,
            58,    0b1000001011001,
            59,    0b1000000101011,
            60,    0b1000000101100,
            61,    0b1000001011010,
            62,    0b1000001100110,
            63,    0b1000001100111,

            // TABLE 3/T.6
            64,    0b10000001111,
            128,   0b1000011001000,
            192,   0b1000011001001,
            256,   0b1000001011011,
            320,   0b1000000110011,
            384,   0b1000000110100,
            448,   0b1000000110101,
            512,   0b10000001101100,
            576,   0b10000001101101,
            640,   0b10000001001010,
            704,   0b10000001001011,
            768,   0b10000001001100,
            832,   0b10000001001101,
            896,   0b10000001110010,
            960,   0b10000001110011,
            1024,  0b10000001110100,
            1088,  0b10000001110101,
            1152,  0b10000001110110,
            1216,  0b10000001110111,
            1280,  0b10000001010010,
            1344,  0b10000001010011,
            1408,  0b10000001010100,
            1472,  0b10000001010101,
            1536,  0b10000001011010,
            1600,  0b10000001011011,
            1664,  0b10000001100100,
            1728,  0b10000001100101,

            1792,  0b100000001000,
            1856,  0b100000001100,
            1920,  0b100000001101,
            1984,  0b1000000010010,
            2048,  0b1000000010011,
            2112,  0b1000000010100,
            2176,  0b1000000010101,
            2240,  0b1000000010110,
            2304,  0b1000000010111,
            2368,  0b1000000011100,
            2432,  0b1000000011101,
            2496,  0b1000000011110,
            2560,  0b1000000011111,
        };
    }
}
